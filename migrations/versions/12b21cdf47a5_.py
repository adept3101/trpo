"""empty message

Revision ID: 12b21cdf47a5
Revises:
Create Date: 2025-10-05 09:39:42.672219

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "12b21cdf47a5"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("client_product")
    op.drop_table("transaction")
    op.drop_table("account_product")
    op.drop_table("application")
    op.drop_table("passport")
    op.drop_table("account")
    # op.add_column('client', sa.Column('registr_date', sa.Date(), nullable=False))
    op.alter_column(
        "client", "name", existing_type=sa.TEXT(), type_=sa.String(), nullable=False
    )
    op.alter_column(
        "client", "lastname", existing_type=sa.TEXT(), type_=sa.String(), nullable=False
    )
    op.alter_column(
        "client", "phone", existing_type=sa.TEXT(), type_=sa.String(), nullable=False
    )
    op.alter_column(
        "client", "email", existing_type=sa.TEXT(), type_=sa.String(), nullable=False
    )
    # op.drop_column("client", "registr_data")
    op.alter_column(
        "employee",
        "full_name",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        nullable=False,
    )
    op.alter_column(
        "employee",
        "position",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        nullable=False,
    )
    op.alter_column("employee", "hire_date", existing_type=sa.DATE(), nullable=False)
    op.alter_column(
        "product",
        "product_name",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        nullable=False,
    )
    op.alter_column(
        "product",
        "description",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        nullable=False,
    )
    op.alter_column(
        "product", "rate", existing_type=sa.TEXT(), type_=sa.String(), nullable=False
    )
    op.alter_column(
        "product", "term", existing_type=sa.TEXT(), type_=sa.String(), nullable=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "product", "term", existing_type=sa.String(), type_=sa.TEXT(), nullable=True
    )
    op.alter_column(
        "product", "rate", existing_type=sa.String(), type_=sa.TEXT(), nullable=True
    )
    op.alter_column(
        "product",
        "description",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        nullable=True,
    )
    op.alter_column(
        "product",
        "product_name",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        nullable=True,
    )
    op.alter_column("employee", "hire_date", existing_type=sa.DATE(), nullable=True)
    op.alter_column(
        "employee",
        "position",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        nullable=True,
    )
    op.alter_column(
        "employee",
        "full_name",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        nullable=True,
    )
    op.add_column(
        "client",
        sa.Column("registr_data", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.alter_column(
        "client", "email", existing_type=sa.String(), type_=sa.TEXT(), nullable=True
    )
    op.alter_column(
        "client", "phone", existing_type=sa.String(), type_=sa.TEXT(), nullable=True
    )
    op.alter_column(
        "client", "lastname", existing_type=sa.String(), type_=sa.TEXT(), nullable=True
    )
    op.alter_column(
        "client", "name", existing_type=sa.String(), type_=sa.TEXT(), nullable=True
    )
    op.drop_column("client", "registr_date")
    op.create_table(
        "account",
        sa.Column("account_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("client_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("numver_acc", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("balance", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("currency", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("open_data", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["client.client_id"],
            name="account_client_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("account_id", name="account_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "passport",
        sa.Column("passport_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("client_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("series", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("number", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("iss_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["client.client_id"],
            name=op.f("passport_client_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("passport_id", name=op.f("passport_pkey")),
    )
    op.create_table(
        "application",
        sa.Column("application_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("client_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("product_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("employee_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("status", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("application_data", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["client.client_id"],
            name=op.f("application_client_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["employee_id"],
            ["employee.employee_id"],
            name=op.f("application_employee_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.product_id"],
            name=op.f("application_product_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("application_id", name=op.f("application_pkey")),
    )
    op.create_table(
        "account_product",
        sa.Column("account_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("product_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("data_connect", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("status", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["account.account_id"],
            name=op.f("account_product_account_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.product_id"],
            name=op.f("account_product_product_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("account_id", name=op.f("account_product_pkey")),
    )
    op.create_table(
        "transaction",
        sa.Column("transaction_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("account_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("amount", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("transaction_data", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("type", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["account.account_id"],
            name=op.f("transaction_account_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("transaction_id", name=op.f("transaction_pkey")),
    )
    op.create_table(
        "client_product",
        sa.Column("client_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("product_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("start_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("end_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("status", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["client.client_id"],
            name=op.f("client_product_client_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.product_id"],
            name=op.f("client_product_product_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "client_id", "product_id", name=op.f("client_product_pkey")
        ),
    )
    # ### end Alembic commands ###
